<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetList_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetList_ES extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByAssetList</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static AssetList_ES findByAssetList(AssetListId_ES _assetListId,boolean _ForUpdate = false)
    {
        AssetList_ES assetList;

        if(_ForUpdate)
        {
            assetList.selectForUpdate(_ForUpdate);
        }

        select firstonly assetList where assetList.ListId == _assetListId;

        return assetList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCost</Name>
				<Source><![CDATA[
    display AssetAdditionTotalCost  totalCost()
    {
        return this.Quantity*this.UnitCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetListExists</Name>
				<Source><![CDATA[
    public static boolean assetListExists(AssetId  _assetId)
    {
        return((select firstonly AssetList_ES where AssetList_ES.AssetId == _assetId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextListId</Name>
				<Source><![CDATA[
    public AssetListId_ES getNextListId(AssetId _assetId = '')
    {
        AssetListId_ES     assetListIdTmp;
        AssetList_ES       assetList;
        int             i;
        str str1;

        if (!_assetId)
        _assetId = this.AssetId;
        select reverse firstOnly assetList where assetList.AssetId == _assetId &&  assetList.RecId != 0;
        if(assetList)
        {
            i = str2int(subStr(assetList.ListId,strLen(assetList.ListId)-2, 3));
            i++;
            if(strLen(int2str(i)) == 1)
        str1 = '00'+int2str(i);
            else if(strLen(int2str(i)) == 2)
            str1 = '0'+ int2str(i);
            else if(strLen(int2str(i)) == 3)
            str1 = int2str(i);
            assetListIdTmp = assetList.AssetId + '_' + str1;
        }
        else
        {
            assetListIdTmp = _assetId+'_001';
        }
        return assetListIdTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextListIdName</Name>
				<Source><![CDATA[
    public AssetListId_ES getNextListIdName(AssetId _assetId = '')
    {
        Name            assetListIdTmp;
        AssetList_ES       assetList;
        int             cnt;

        if (!_assetId)
        _assetId = this.AssetId;
        select reverse assetList where assetList.AssetId == _assetId && assetList.RecId != 0 ;
        cnt = strFind(assetList.ListId, '_', 11, 4);
        assetListIdTmp = AssetTable::find(assetList.AssetId).Name + '_' + int2str((any2int(subStr(assetList.ListId, cnt+1, 4)) + 1));
        return assetListIdTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetList</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public server void createAssetList(AssetTable               _assetTable,
                                   Counter                  _cnt = 1,
                                   AssetAdditionCostPrice   _assetPrice = 0)
    {
        AssetList_ES   assetListIns;
        Counter     i, seq;
        str         concat;

        if (AssetList_ES::assetListExists(_assetTable.AssetId))
        seq = any2int(subStr(this.getNextListId(_assetTable.AssetId),13,4));
        else
        seq = 1;

        if (_cnt != 0)
        {
            ttsBegin;
            for (i = 1; i <= _cnt; i++)
            {
                if (strLen(int2str(seq)) == 1)
                {
                    concat = '_00';
                }
                if (strLen(int2str(seq)) == 2)
                {
                    concat = '_0';
                }
                if (strLen(int2str(seq)) == 3)
                {
                    concat = '_';
                }
                assetListIns.AcquisitionDate   = AssetBookTbl_Extension::findByAssetId(_assetTable.AssetId).AcquisitionDate; //AssetMgmt_Prem systemDateGet();
                assetListIns.AssetId           = _assetTable.AssetId;
                assetListIns.ListId       = assetListIns.getNextListId(_assetTable.AssetId);
                assetListIns.Quantity          = 1;
                assetListIns.UnitCost          = _assetPrice > 0 ? _assetPrice : _assetTable.UnitCost;
                assetListIns.Name              = assetListIns.getNextListIdName(_assetTable.AssetId);//_assetTable.Name + concat + int2str(seq);
                //assetListIns.DefaultDimension  = _assetTable.DefaultDimension;
                assetListIns.Allocation        = AssetGroup::find(_assetTable.AssetGroup).Allocation;
                assetListIns.DefaultLocation   = AssetParameters::find().AssetLocId_ES;
                //assetListIns.DefaultDimension  = _assetTable.DefaultDimension;
                assetListIns.Make              = _assetTable.Make;
                assetListIns.Model             = _assetTable.Model;
                assetListIns.ModelYear         = _assetTable.ModelYear;
                assetListIns.Serial            = _assetTable.SerialNum;
                assetListIns.TechnicalInfo     = _assetTable.TechInfo1;

                //AssetMgmt_Prem
                if(AssetBookTbl_Extension::findByAssetId(_assetTable.AssetId).DefaultDimension &&
               assetlocation_ES::find(assetListIns.DefaultLocation, false).DimensionDefault)
                    assetListIns.DefaultDimension  = AssetList_ES::mergeDimension(AssetBookTbl_Extension::findByAssetId(_assetTable.AssetId).DefaultDimension,
                                                                       AssetLocation_ES::find(assetListIns.DefaultLocation, false).DimensionDefault);

                if(!AssetBookTbl_Extension::findByAssetId(_assetTable.AssetId).DefaultDimension &&
               AssetLocation_ES::find(assetListIns.DefaultLocation, false).DimensionDefault)
                assetListIns.DefaultDimension  = assetlocation_ES::find(assetListIns.DefaultLocation, false).DimensionDefault;

                if(AssetBookTbl_Extension::findByAssetId(_assetTable.AssetId).DefaultDimension &&
               !AssetLocation_ES::find(assetListIns.DefaultLocation, false).DimensionDefault)
                assetListIns.DefaultDimension  = AssetBookTbl_Extension::findByAssetId(_assetTable.AssetId).DefaultDimension;
                //

                assetListIns.insert();
                seq++;
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    //AssetMgmt_Prem
    public static DimensionDefault mergeDimension(DimensionDefault firstDim, DimensionDefault secondDim)
    {
        DimensionAttributeValueSet      dimAttrValueSet_F, dimAttrValueSet_S, dimAttrValueSet_N;
        DimensionAttributeValueSetItem    dimAttrValueSetItem_F, dimAttrValueSetItem_S, dimAttrValueSetItem_N;
        DimensionAttributeValue            dimAttrValue_F, dimAttrValue_S, dimAttrValue_N;
        DimensionAttribute              dimAttr;
        DimensionValue                  displayValue_N;
        int                             dimAttrCount, i;
        DimensionEnumeration            dimensionSetId;
        DimensionAttributeSetItem       dimAttrSetItem;
        DimensionSHA1Hash               hash;
        HashKey                         valueKeyHashArray[];
        Array                           newSeg_Attr = new Array (Types::Int64);
        Array                           newSeg_Disp = new Array (Types::String);
        ;

        dimAttrValueSet_F = DimensionAttributeValueSet::find(firstDim);
        dimAttrValueSet_S = DimensionAttributeValueSet::find(secondDim);

        dimensionSetId = DimensionCache::getDimensionAttributeSetForLedger();

        while select * from dimAttr
            order by Name
            where dimAttr.Type != DimensionAttributeType::MainAccount
        join RecId from dimAttrSetItem
            where dimAttrSetItem.DimensionAttribute == dimAttr.RecId &&
                dimAttrSetItem.DimensionAttributeSet == dimensionSetId
        {
            dimAttrCount++;

            select dimAttrValue_F join dimAttrValueSetItem_F
            where dimAttrValueSetItem_F.DimensionAttributeValueSet == dimAttrValueSet_F.RecId
            && dimAttrValue_F.RecId == dimAttrValueSetItem_F.DimensionAttributeValue
            && dimAttrValue_F.DimensionAttribute == dimAttr.RecId;

            select dimAttrValue_S join dimAttrValueSetItem_S
            where dimAttrValueSetItem_S.DimensionAttributeValueSet == dimAttrValueSet_S.RecId
            && dimAttrValue_S.RecId == dimAttrValueSetItem_S.DimensionAttributeValue
            && dimAttrValue_S.DimensionAttribute == dimAttr.RecId;

            if(dimAttrValueSetItem_F.DisplayValue == dimAttrValueSetItem_S.DisplayValue)
            {
                dimAttrValue_N = DimensionAttributeValue::find(dimAttrValue_S.RecId);
                dimAttrValueSetItem_N = DimensionAttributeValueSetItem::find(dimAttrValueSetItem_S.RecId);
            }

            if(dimAttrValueSetItem_F.DisplayValue != "" && dimAttrValueSetItem_S.DisplayValue == "")
            {
                dimAttrValue_N = DimensionAttributeValue::find(dimAttrValue_F.RecId);
                dimAttrValueSetItem_N = DimensionAttributeValueSetItem::find(dimAttrValueSetItem_F.RecId);
            }

            if(dimAttrValueSetItem_F.DisplayValue == "" && dimAttrValueSetItem_S.DisplayValue != "")
            {
                dimAttrValue_N = DimensionAttributeValue::find(dimAttrValue_S.RecId);
                dimAttrValueSetItem_N = DimensionAttributeValueSetItem::find(dimAttrValueSetItem_S.RecId);
            }

            if(dimAttrValueSetItem_F.DisplayValue != "" && dimAttrValueSetItem_S.DisplayValue != ""
           && (dimAttrValueSetItem_F.DisplayValue != dimAttrValueSetItem_S.DisplayValue))
            {
                dimAttrValue_N = DimensionAttributeValue::find(dimAttrValue_S.RecId);
                dimAttrValueSetItem_N = DimensionAttributeValueSetItem::find(dimAttrValueSetItem_S.RecId);
            }

            newSeg_Attr.value(dimAttrCount, dimAttrValue_N.RecId);
            newSeg_Disp.value(dimAttrCount, dimAttrValueSetItem_N.DisplayValue);

            dimAttrValue_N = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimAttr.RecId, dimAttrValueSetItem_N.RecId, false, true);

            valueKeyHashArray[dimAttrCount] =   dimAttrValue_N.HashKey;
        }

        hash = DimensionAttributeValueSetStorage::getHashFromArray(valueKeyHashArray, dimAttrCount);

        if(hash == conNull())
        throw error("Wrong values for Dimension");

        dimAttrValueSet_N = DimensionAttributeValueSet::findByHash(hash);

        if(!dimAttrValueSet_N)
        {
            ttsbegin;

            dimAttrValueSet_N.Hash = hash;
            dimAttrValueSet_N.insert();

            for (i=1; i <= dimAttrCount; i++)
            {
                dimAttrValueSetItem_N.clear();
                dimAttrValueSetItem_N.DimensionAttributeValueSet = dimAttrValueSet_N.RecId;
                dimAttrValueSetItem_N.DimensionAttributeValue = newSeg_Attr.value(i);
                dimAttrValueSetItem_N.DisplayValue = newSeg_Disp.value(i);

                if(dimAttrValueSetItem_N.DimensionAttributeValue && dimAttrValueSetItem_N.DisplayValue)
                dimAttrValueSetItem_N.insert();
            }

            ttscommit;
        }

        return dimAttrValueSet_N.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void initValue()
    {
        #DEFINE.DefaultQty(1.00)

        super();
        this.Quantity = #DefaultQty;
        this.UnitCost =1;
        this.LocId = AssetParameters::find().AssetLocId_ES;
        this.DefaultLocation = AssetParameters::find().AssetLocId_ES;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void insert()
    {
        this.LocId = AssetParameters::find().AssetLocId_ES;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static boolean checkExist(AssetId _assetId,AssetAdditionNum _additionNumber)
    {
        boolean ret = true;

        if(!AssetAddition::exist(_assetId,_additionNumber))
        {
            ret = checkFailed(strFmt(AssetAddition::txtNotExist(),_assetId,_additionNumber));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static boolean exist(AssetId _assetId,AssetAdditionNum _additionNumber)
    {
        boolean found;
        AssetAddition AssetAddition;

        found =(select firstonly RecId from AssetAddition
                     where AssetAddition.AssetId == _assetId &&
                           AssetAddition.AdditionNumber == _additionNumber).RecId != 0;
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static AssetList_ES find(AssetId _assetId,AssetListId_ES _additionalNumber,boolean _forupdate =false,ConcurrencyModel _concurrencyModel =ConcurrencyModel::Auto)
    {
        AssetList_ES assetList;

        assetList.selectForUpdate(_forupdate);
        if(_forupdate &&_concurrencyModel != ConcurrencyModel::Auto)
        {
            assetList.concurrencyModel(_concurrencyModel);
        }
        select firstonly  assetList
            where assetList.AssetId == _assetId &&
            assetList.ListId == _additionalNumber;

        return assetList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAssetListValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static AssetAdditionTotalCost totalAssetListValue(AssetId _assetId)
    {
        AssetList_ES  assetListValue;
        Amount           totalValue;

        while select Quantity,UnitCost from assetListValue
            where assetListValue.AssetId == _assetId  &&
            assetListValue.Status != AssetStatus_ES::closed &&
            assetListValue.Stopped == NoYes::No
        {
            totalValue += assetListValue.Quantity * assetListValue.UnitCost;
        }
        return totalValue;
      }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>Asset List</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField2>Name</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Acquisition</Name>
			<Label>Acquisition</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AcquisitionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalCost</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetId</Name>
			<Label>Fixed asset number</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>Description</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>Identification</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>Inventory</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BarCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Model</Name>
			<Label>Model</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Make</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Model</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Serial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TechnicalInfo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcquisitionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Stopped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalCost</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Purchase</Name>
			<Label>Purchase</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PODate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>Reference</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Comments</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LocType</Name>
			<EnumType>AssetLocType_ES</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ListId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>AssetListId_ES</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitCost</Name>
			<ExtendedDataType>AssetAdditionCostPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToAssetId</Name>
			<ExtendedDataType>AssetId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Stopped</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>AssetStatus_ES</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>AssetName</ExtendedDataType>
			<HelpText>Enter a description for the asset</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MovementRef</Name>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>AssetLocId_ES</ExtendedDataType>
			<Label>Location</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AcquisitionDate</Name>
			<ExtendedDataType>AssetAcquisitionDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<ExtendedDataType>AssetAdditionQty</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Allocation</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultLocation</Name>
			<ExtendedDataType>AssetLocId_ES</ExtendedDataType>
			<Label>Default location</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Make</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS67389</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Model</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS9923</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Serial</Name>
			<ExtendedDataType>Num</ExtendedDataType>
			<Label>Serial number</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelYear</Name>
			<ExtendedDataType>AssetModelYear</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TechnicalInfo</Name>
			<ExtendedDataType>AssetTechInfo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetSuspended</Name>
			<Label>Suspended</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetUserGroup</Name>
			<ExtendedDataType>UserGroupId</ExtendedDataType>
			<Label>User group</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BarCode</Name>
			<ExtendedDataType>AssetBarcode</ExtendedDataType>
			<HelpText>Bar code of the additional item</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comments</Name>
			<ExtendedDataType>AssetAdditionComments</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PostingDate</Name>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
			<HelpText>Posting Date</HelpText>
			<Label>Date</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EmployeeResponsible</Name>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
			<Label>Employee responsible</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FATransferJournal</Name>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
			<Label>Movement journal number</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FATransferFate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>Movement date</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentId</Name>
			<ExtendedDataType>PaymId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PaymentDate</Name>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
			<HelpText>Date of payment</HelpText>
			<Label>Payment date</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PODate</Name>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
			<HelpText>Any date related to purchase order</HelpText>
			<Label>PO date</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransferReason</Name>
			<ExtendedDataType>ReasonComment</ExtendedDataType>
			<Label>Transfer reason</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransferRefId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>Reference</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UOM</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<HelpText>the common unit of measure for the item</HelpText>
			<Label>Unit of measure</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetListIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ListId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetTransferJourPost</Name>
			<RelatedTable>AssetTransferJourPost_ES</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ListId</Name>
					<Field>ListId</Field>
					<RelatedField>AssetListId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitofMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UOM</Name>
					<Field>UOM</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EmployeeResponsible</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EmployeeResponsible</Name>
					<Field>EmployeeResponsible</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>