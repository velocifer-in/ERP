<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SIGProjTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tablestr(ProjTable))]
public final class SIGProjTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(boolean _calledFromStatus)
    {
        boolean ret = next validateWrite(_calledFromStatus);


        if (ret && !this.ProjectedEndDate && this.DefaultDimension && this.RecId)
        {
            ret = checkFailed("Projected end date should not be blank");
        }

        if (ret && !this.WorkerResponsible && this.DefaultDimension && this.RecId)
        {
            ret = checkFailed("Project manager should not be blank");
        }

        if (ret && !this.WorkerResponsibleFinancial && this.DefaultDimension && this.RecId)
        {
            ret = checkFailed("Project controller should not be blank");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOriginalBudget</Name>
				<Source><![CDATA[
    public  display Amount  displayOriginalBudget()
    {
        //ProjBudgetLine  localProjectBudgetLocal,projBudgetLineCost;

        //localProjectBudgetLocal = projBudgetLineCost.calcTotalBudgetLine(this.ProjId);

        //return localProjectBudgetLocal.OriginalBudget;

        ProjBudgetLine  localProjectBudgetLocal,projBudgetLineCost;
        ProjBudgetLine  projBudgetLineLocal;
        #define.Star("*");
        select sum(OriginalBudget),sum(CommittedRevisions),sum(UncommittedRevisions), sum(TotalBudget)
                            from projBudgetLineLocal
                            where  projBudgetLineLocal.ProjId like this.ProjId + #Star
                            &&    projBudgetLineLocal.ProjBudgetLineType == ProjBudgetLineType::Revenue;

        //projBudgetLineLocal.ProjBudget == this.ProjBudget
        //                &&    projBudgetLineLocal.ProjBudgetLineType == ProjBudgetLineType::Cost
        //                &&    projBudgetLineLocal.ProjId like _projId + #Star;

        //     localProjectBudgetLocal = projBudgetLineCost.calcTotalBudgetLine(this.ProjId);
        
        return projBudgetLineLocal.OriginalBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCommittedRevisionsTotal</Name>
				<Source><![CDATA[
    public  display Amount  displayCommittedRevisionsTotal()
    {
        //ProjBudgetLine  localProjectBudgetLocal,projBudgetLineCost;

        //localProjectBudgetLocal = projBudgetLineCost.calcTotalBudgetLine(this.ProjId);

        //return localProjectBudgetLocal.CommittedRevisions;
        ProjBudgetLine  localProjectBudgetLocal,projBudgetLineCost;
        ProjBudgetLine  projBudgetLineLocal;
        #define.Star("*");
        select sum(OriginalBudget),sum(CommittedRevisions),sum(UncommittedRevisions), sum(TotalBudget)
                            from projBudgetLineLocal
                            where  projBudgetLineLocal.ProjId like this.ProjId + #Star
                            &&    projBudgetLineLocal.ProjBudgetLineType == ProjBudgetLineType::Revenue;

        //projBudgetLineLocal.ProjBudget == this.ProjBudget
        //                &&    projBudgetLineLocal.ProjBudgetLineType == ProjBudgetLineType::Cost
        //                &&    projBudgetLineLocal.ProjId like _projId + #Star;

        //     localProjectBudgetLocal = projBudgetLineCost.calcTotalBudgetLine(this.ProjId);
        
        return projBudgetLineLocal.CommittedRevisions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUncommittedRevisionsTotal</Name>
				<Source><![CDATA[
    public  display Amount  displayUncommittedRevisionsTotal()
    {
        ProjBudgetLine  localProjectBudgetLocal,projBudgetLineCost;
        ProjBudgetLine  projBudgetLineLocal;
        #define.Star("*");
        select sum(OriginalBudget),sum(CommittedRevisions),sum(UncommittedRevisions), sum(TotalBudget)
                            from projBudgetLineLocal
                            where  projBudgetLineLocal.ProjId like this.ProjId + #Star
                            &&    projBudgetLineLocal.ProjBudgetLineType == ProjBudgetLineType::Revenue;

            //projBudgetLineLocal.ProjBudget == this.ProjBudget
            //                &&    projBudgetLineLocal.ProjBudgetLineType == ProjBudgetLineType::Cost
            //                &&    projBudgetLineLocal.ProjId like _projId + #Star;

   //     localProjectBudgetLocal = projBudgetLineCost.calcTotalBudgetLine(this.ProjId);
        
        return projBudgetLineLocal.UncommittedRevisions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetLineTotal</Name>
				<Source><![CDATA[
    public  display Amount  displayBudgetLineTotal()
    {
        //ProjBudgetLine  localProjectBudgetLocal,projBudgetLineCost;

        //localProjectBudgetLocal = projBudgetLineCost.calcTotalBudgetLine(this.ProjId);

        //return localProjectBudgetLocal.TotalBudget;

        ProjBudgetLine  localProjectBudgetLocal,projBudgetLineCost;
        ProjBudgetLine  projBudgetLineLocal;
        #define.Star("*");
        select sum(OriginalBudget),sum(CommittedRevisions),sum(UncommittedRevisions), sum(TotalBudget)
                            from projBudgetLineLocal
                            where  projBudgetLineLocal.ProjId like this.ProjId + #Star
                            &&    projBudgetLineLocal.ProjBudgetLineType == ProjBudgetLineType::Revenue;

        //projBudgetLineLocal.ProjBudget == this.ProjBudget
        //                &&    projBudgetLineLocal.ProjBudgetLineType == ProjBudgetLineType::Cost
        //                &&    projBudgetLineLocal.ProjId like _projId + #Star;

        //     localProjectBudgetLocal = projBudgetLineCost.calcTotalBudgetLine(this.ProjId);
        
        return projBudgetLineLocal.TotalBudget;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>