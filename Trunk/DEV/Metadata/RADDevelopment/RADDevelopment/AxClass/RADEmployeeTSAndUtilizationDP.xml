<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RADEmployeeTSAndUtilizationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SrsReportParameterAttribute(classstr(RADEmployeeTSAndUtilizationContract))]
class RADEmployeeTSAndUtilizationDP extends SRSReportDataProviderBase
{

    //TableBuffer Decleration
    RADEmployeeTSAndUtilizationTmp      employeeTSAndUtilizationTmp;
    StartDate                           startDate,periodStartDate,parmStartDate;
    EndDate                             endDate,periodEndDate,parmEndDate;
    RADPayCheckUtilizationTmp           payCheckTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRADEmployeeTSAndUtilizationTmp</Name>
				<Source><![CDATA[
    //Setting SRSReportDataSet Attribute
    [SrsReportDataSetAttribute('RADEmployeeTSAndUtilizationTmp')]
    public RADEmployeeTSAndUtilizationTmp getRADEmployeeTSAndUtilizationTmp()
    {
        select * from employeeTSAndUtilizationTmp; 
        return employeeTSAndUtilizationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    [SysEntryPointAttribute()]
    public void processReport()
    {
        RADEmployeeTSAndUtilizationContract     contract = this.parmDataContract() as RADEmployeeTSAndUtilizationContract;
        TSTimesheetTable                        timesheetTable;
        TSTimesheetLineWeek                     timesheetLineWeek;
        TSTimesheetLine                         timesheetLine;
        PayrollPayPeriod                        payrollPayPeriod;
        ProjTable                               projTable;
        HcmWorker                               hcmWorker;
        HcmPersonnelNumberId                    emplId;
        Hours                                   salaryHours, otHours;
        HcmPersonnelNumberId                    hcmPersonnelNumberId;
        RADPayCheckUtilizationDetailsTmp        payCheckDetailsTmp,payCheckTmpDetailsIns;
        Qty                                     hours;
        ProjPostedTransTable                    projPostedTransTable;
        RADPayCheckUtilizationTransTmp          payCheckUtilizationTransTmp;
        TSTimesheetTrans                        timesheetTransLocal;

        payrollPayPeriod    = PayrollPayPeriod::find(contract.parmPayPeriod());

        startDate     = payrollPayPeriod.PeriodStartDate;
        endDate       = payrollPayPeriod.PeriodEndDate;

        delete_from payCheckDetailsTmp;

        while select timesheetTable
            where timesheetTable.PeriodFrom >= startDate && timesheetTable.PeriodTo <= endDate
            && timesheetTable.ApprovalStatus    == TSAppStatus::Ledger
            join timesheetLine
            where timesheetTable.TimesheetNbr == timesheetLine.TimesheetNbr
            join timesheetLineWeek
            where timesheetLine.RecId == timesheetLineWeek.TSTimesheetLine
        {
            hcmWorker =  HcmWorker::find(TSResource::workerRecId(timesheetLine.Resource));
            projTable = ProjTable::find(timesheetLine.ProjId);
            
            if ((HcmWorkerHelper::getPrimaryDepartment(hcmWorker.RecId).Name == contract.parmOMOperatingUnitNumber() && contract.parmOMOperatingUnitNumber() != "") || contract.parmOMOperatingUnitNumber() == "")
            {

                //if (timesheetLine.CategoryId ==  "Overhead")
                //{
                //    info('');// otHoursSIG += payCheckDetailsTmp.Hours;
                //}
                payCheckTmp.CategoryId              =  timesheetLine.CategoryId;
                payCheckTmp.LinePropertyId          =  timesheetLine.LinePropertyId;
                payCheckTmp.TimesheetNbr            =  timesheetLine.TimesheetNbr;
                payCheckTmp.ResourceName            =  hcmWorker.name();
                payCheckTmp.dataArea                =  '18127741';//strUpr(timesheetLine.DataAreaId);
                payCheckTmp.HcmPersonnelNumberId    =  hcmWorker.PersonnelNumber;
                payCheckTmp.RADPayCalc              =  ProjCategory::find(timesheetLine.CategoryId).RADPayCalc;
                payCheckTmp.StartDate               =  timesheetLineWeek.DayFrom;//startDate;
                payCheckTmp.EndDate                 =  timesheetLineWeek.DayTo;
                payCheckTmp.DefaultProfileId        =  JmgEmployee::find(hcmWorker.recId).DefaultProfileId;
                payCheckTmp.RADEmployeeType         =  JmgPayAgreementTable::find( JMGPROFILETABLE::find(payCheckTmp.DefaultProfileId ).PayAgreement).RADEmployeeType;
                payCheckTmp.RADLeaveAndAbsence      =  ProjTable.RADLeaveAndAbsence;
                payCheckTmp.TransId                 =  timesheetLineWeek.TransId;
                var TotalHours = timesheetLineWeek.totalHours();
          
                payCheckTmp.TotalHours = TotalHours;
                payCheckTmp.Hours = TotalHours;
            
  
                payCheckTmp.insert();

                select timesheetTransLocal where timesheetTransLocal.TSTimesheetLineWeek == timesheetLineWeek.RecId;

                select Qty from projPostedTransTable where projPostedTransTable.TransactionOrigin == ProjOrigin::Timesheet
                                && projPostedTransTable.TransId           == timesheetTransLocal.TransId;//TSTimesheetTrans::find(timesheetLineWeek.TimesheetNbr,timesheetLineWeek.RecId,timesheetLineWeek.ProjTransDate).TransId;
            
                payCheckUtilizationTransTmp.CategoryId           =  timesheetLine.CategoryId;
                payCheckUtilizationTransTmp.TransId              = timesheetLineWeek.TransId;
                payCheckUtilizationTransTmp.ResourceName         = HcmWorker::find(timesheetTable.SIGParentWorker).name();
                payCheckUtilizationTransTmp.HcmPersonnelNumberId = hcmWorker.PersonnelNumber;
                payCheckUtilizationTransTmp.TimesheetNbr         = timesheetLine.TimesheetNbr;
                payCheckUtilizationTransTmp.Hours                = projPostedTransTable.Qty;
                payCheckUtilizationTransTmp.TotalHours           = timesheetLineWeek.totalHours();
                payCheckUtilizationTransTmp.insert();
            }
        }


        insert_recordset payCheckDetailsTmp(Resource,ResourceName,CategoryId,Hours,TotalHours,HcmPersonnelNumberId,StartDate,EndDate,RADPayCalc,DefaultProfileId,RADEmployeeType,RADLeaveAndAbsence,LinePropertyId,TimesheetNbr,TransId)
            select Resource,ResourceName,CategoryId,Hours,TotalHours,HcmPersonnelNumberId,StartDate,EndDate,RADPayCalc,DefaultProfileId,RADEmployeeType,RADLeaveAndAbsence,LinePropertyId,TimesheetNbr,TransId from payCheckTmp;


        while select payCheckTmp group by HcmPersonnelNumberId, startDate,endDate where payCheckTmp.RADEmployeeType != RADEmployeeType::Salaried
                                                                                    &&  payCheckTmp.RADLeaveAndAbsence == NoYes::No
        {

            periodStartDate = payCheckTmp.StartDate;
            periodEndDate   = payCheckTmp.EndDate;
            hcmPersonnelNumberId    = payCheckTmp.HcmPersonnelNumberId;

            select sum(Hours) from payCheckDetailsTmp where payCheckDetailsTmp.HcmPersonnelNumberId == hcmPersonnelNumberId
                                        && payCheckDetailsTmp.StartDate == periodStartDate
                                        && payCheckDetailsTmp.EndDate   == periodEndDate
                                        && payCheckDetailsTmp.RADLeaveAndAbsence == NoYes::No
                                        && payCheckDetailsTmp.RADEmployeeType != RADEmployeeType::Salaried;
            if (payCheckDetailsTmp.Hours > JmgPayAgreementTable::find( JMGPROFILETABLE::find(JmgEmployee::find(HcmWorker::findByPersonnelNumber(hcmPersonnelNumberId).RecId).DefaultProfileId).PayAgreement).RADDays )
            {
                hours = payCheckDetailsTmp.Hours - JmgPayAgreementTable::find( JMGPROFILETABLE::find(JmgEmployee::find(HcmWorker::findByPersonnelNumber(hcmPersonnelNumberId).RecId).DefaultProfileId).PayAgreement).RADDays;//JmgPayAgreementTable::find(JmgEmployee::find(HcmWorker::findByPersonnelNumber(hcmPersonnelNumberId).RecId).DefaultProfileId).RADDays;

                payCheckDetailsTmp.StartDate               =  periodStartDate;//startDate;
                payCheckDetailsTmp.EndDate                 =  periodEndDate;
                payCheckDetailsTmp.HcmPersonnelNumberId    =  hcmPersonnelNumberId;
                payCheckDetailsTmp.CategoryId              = 'Overtime';
                payCheckDetailsTmp.Hours                   = hours;//payCheckDetailsTmp.Hours - JmgPayAgreementTable::find(JmgEmployee::find(HcmWorker::findByPersonnelNumber(hcmPersonnelNumberId).RecId).DefaultProfileId).RADDays;
                payCheckDetailsTmp.RADPayCalc              = RADPayCalc::None;
                payCheckDetailsTmp.dataArea                =  '18127741';
                payCheckDetailsTmp.RADEmployeeType         = JmgPayAgreementTable::find(JmgEmployee::find(HcmWorker::findByPersonnelNumber(hcmPersonnelNumberId).RecId).DefaultProfileId).RADEmployeeType;
                payCheckDetailsTmp.DefaultProfileId        =  JmgEmployee::find(HcmWorker::findByPersonnelNumber(hcmPersonnelNumberId).RecId).DefaultProfileId;
                payCheckDetailsTmp.insert();
            }
        }

        while select payCheckDetailsTmp where payCheckDetailsTmp.CategoryId == 'Overtime'
                                      //  && payCheckDetailsTmp.RADEmployeeType != RADEmployeeType::Salaried
        {
            ttsbegin;
            select payCheckTmp where payCheckTmp.HcmPersonnelNumberId == payCheckDetailsTmp.HcmPersonnelNumberId
                                && payCheckTmp.CategoryId == 'Overtime';
            if(payCheckTmp)
            {
                payCheckTmp.selectForUpdate(true);
                payCheckTmp.Hours += payCheckDetailsTmp.Hours;
                payCheckTmp.update();
            }
            else
            {
                payCheckTmp.StartDate               =  startDate;// payCheckDetailsTmp.StartDate ;//startDate;
                payCheckTmp.EndDate                 =  endDate;//payCheckDetailsTmp.EndDate ;
                payCheckTmp.HcmPersonnelNumberId    =  payCheckDetailsTmp.HcmPersonnelNumberId ;
                payCheckTmp.CategoryId              =  payCheckDetailsTmp.CategoryId  ;
                payCheckTmp.Hours                   =  payCheckDetailsTmp.Hours;//payCheckDetailsTmp.Hours - JmgPayAgreementTable::find(JmgEmployee::find(HcmWorker::findByPersonnelNumber(hcmPersonnelNumberId).RecId).DefaultProfileId).RADDays;
                payCheckTmp.RADPayCalc              =  RADPayCalc::None;
                payCheckTmp.ResourceName            =  HcmWorker::findByPersonnelNumber(payCheckDetailsTmp.HcmPersonnelNumberId).name();
                payCheckTmp.RADLeaveAndAbsence      =  NoYes::Yes;
                payCheckTmp.dataArea                =  '18127741';
                payCheckTmp.RADEmployeeType         =  payCheckDetailsTmp.RADEmployeeType;//JmgPayAgreementTable::find(JmgEmployee::find(HcmWorker::findByPersonnelNumber(hcmPersonnelNumberId).RecId).DefaultProfileId).RADEmployeeType;
                payCheckTmp.DefaultProfileId        =  payCheckDetailsTmp.DefaultProfileId;
                payCheckTmp.insert();
            }
            ttscommit;

        }
        delete_from payCheckDetailsTmp;

        insert_recordset payCheckDetailsTmp(Resource,ResourceName,CategoryId,Hours,TotalHours,HcmPersonnelNumberId,StartDate,EndDate,RADPayCalc,DefaultProfileId,RADEmployeeType,RADLeaveAndAbsence,LinePropertyId,TimesheetNbr,TransId )
            select Resource,ResourceName,CategoryId,Hours,TotalHours,HcmPersonnelNumberId,StartDate,EndDate,RADPayCalc,DefaultProfileId,RADEmployeeType,RADLeaveAndAbsence,LinePropertyId,TimesheetNbr,TransId  from payCheckTmp;

        delete_from payCheckTmp where payCheckTmp.RADLeaveAndAbsence == NoYes::No;
                                //   &&   payCheckTmp.CategoryId == 'Overhead' ;

        Qty cuttoffHours;

        while select payCheckDetailsTmp order by HcmPersonnelNumberId where payCheckDetailsTmp.RADLeaveAndAbsence == NoYes::No
        {
            ttsbegin;
            select payCheckTmp where payCheckTmp.HcmPersonnelNumberId == payCheckDetailsTmp.HcmPersonnelNumberId
                                 && payCheckTmp.RADLeaveAndAbsence == NoYes::No;
            if(payCheckTmp)
            {
                payCheckTmp.selectForUpdate(true);
                payCheckTmp.Hours += payCheckDetailsTmp.Hours;
                payCheckTmp.update();
            }
            else
            {
                payCheckTmp.StartDate               =  startDate;
                payCheckTmp.EndDate                 =  endDate;
                payCheckTmp.HcmPersonnelNumberId    =  payCheckDetailsTmp.HcmPersonnelNumberId ;
                if (payCheckDetailsTmp.RADEmployeeType == RADEmployeeType::Hourly)
                {
                    payCheckTmp.CategoryId              =  'Hourly';
                }
                else
                {
                    payCheckTmp.CategoryId              =  'Salary';
                }
                payCheckTmp.Hours                   =  payCheckDetailsTmp.Hours;
                payCheckTmp.RADPayCalc              =  RADPayCalc::None;
                payCheckTmp.ResourceName            =  HcmWorker::findByPersonnelNumber(payCheckDetailsTmp.HcmPersonnelNumberId).name();
                payCheckTmp.RADLeaveAndAbsence      =  NoYes::No;
                payCheckTmp.dataArea                =  '18127741';
                payCheckTmp.RADEmployeeType         =  payCheckDetailsTmp.RADEmployeeType;
                payCheckTmp.DefaultProfileId        =  payCheckDetailsTmp.DefaultProfileId;
                payCheckTmp.insert();
            }
            ttscommit;
        }
        update_recordset payCheckTmp setting StartDate = StartDate,EndDate  =  endDate ;
        
        delete_from payCheckDetailsTmp;

        insert_recordset payCheckDetailsTmp(Resource,ResourceName,CategoryId,Hours,TotalHours,HcmPersonnelNumberId,StartDate,EndDate,RADPayCalc,DefaultProfileId,RADEmployeeType,RADLeaveAndAbsence,LinePropertyId,TimesheetNbr,TransId )
            select Resource,ResourceName,CategoryId,Hours,TotalHours,HcmPersonnelNumberId,StartDate,EndDate,RADPayCalc,DefaultProfileId,RADEmployeeType,RADLeaveAndAbsence,LinePropertyId,TimesheetNbr,TransId  from payCheckTmp;

 

        // ttsbegin;
        while select payCheckDetailsTmp group by HcmPersonnelNumberId  where payCheckDetailsTmp.RADEmployeeType != RADEmployeeType::Salaried// == ''//group by HcmPersonnelNumberId// where payCheckTmp.CategoryId =
        {
            select payCheckTmp where payCheckTmp.HcmPersonnelNumberId == payCheckDetailsTmp.HcmPersonnelNumberId
                && payCheckTmp.CategoryId == 'Overtime';
            otHours = payCheckTmp.Hours;

            ttsbegin;
            select forupdate payCheckTmp where payCheckTmp.HcmPersonnelNumberId == payCheckDetailsTmp.HcmPersonnelNumberId
                && (payCheckTmp.CategoryId == 'Salary'  || payCheckTmp.CategoryId == 'Hourly');
            salaryHours = payCheckTmp.Hours;

            if (salaryHours && otHours)
            {
                payCheckTmp.Hours -= otHours;
                payCheckTmp.update();
            }
            ttscommit;
         
        }
        delete_from payCheckDetailsTmp;

        insert_recordset payCheckDetailsTmp(Resource,ResourceName,CategoryId,Hours,TotalHours,HcmPersonnelNumberId,StartDate,EndDate,RADPayCalc,DefaultProfileId,RADEmployeeType,RADLeaveAndAbsence,LinePropertyId,TimesheetNbr,TransId )
            select Resource,ResourceName,CategoryId,Hours,TotalHours,HcmPersonnelNumberId,StartDate,EndDate,RADPayCalc,DefaultProfileId,RADEmployeeType,RADLeaveAndAbsence,LinePropertyId,TimesheetNbr,TransId  from payCheckTmp;

        TSHoursTotal        otHoursSIG, utilizationExlHolPLSIG , utilizationAllHoursSIG,personalLeave,holiday,leaveWithoutPay,overHead,utilBaseHours;
        TSTimesheetTrans    timeSheetTrans;
        ProjJournalTrans    projJournalTrans;
        TSHoursTotal        billableHours,nonBillableHours,invoicedAmount;

        while select payCheckTmp group by HcmPersonnelNumberId
        {
            employeeTSAndUtilizationTmp.HcmPersonnelNumberId    = payCheckTmp.HcmPersonnelNumberId;
            employeeTSAndUtilizationTmp.ResourceName            = HcmWorker::findByPersonnelNumber(payCheckTmp.HcmPersonnelNumberId).name();
            otHoursSIG              = 0;
            utilizationExlHolPLSIG  = 0;
            utilizationAllHoursSIG  = 0;
            personalLeave           = 0;
            holiday                 = 0;
            billableHours           = 0;
            nonBillableHours        = 0;
            leaveWithoutPay         = 0;
            invoicedAmount          = 0;
            overHead                = 0;
            utilBaseHours           = 0;

            while select payCheckDetailsTmp where payCheckDetailsTmp.HcmPersonnelNumberId == payCheckTmp.HcmPersonnelNumberId
            {
                
                if (payCheckDetailsTmp.CategoryId ==  "Overtime")
                {
                    otHoursSIG += payCheckDetailsTmp.Hours;
                }
                if (payCheckDetailsTmp.CategoryId == "Hourly"  || payCheckDetailsTmp.CategoryId == "Salary")
                {
                    utilizationExlHolPLSIG  += payCheckDetailsTmp.Hours;
                }
                if (payCheckDetailsTmp.RADPayCalc == RADPayCalc::PersonalTimeOff)
                {
                    personalLeave += payCheckDetailsTmp.Hours;
                }
                if (payCheckDetailsTmp.RADPayCalc == RADPayCalc::Holiday)
                {
                    holiday += payCheckDetailsTmp.Hours;
                }
                if (payCheckDetailsTmp.RADPayCalc == RADPayCalc::LeaveWithOutPay)
                {
                    leaveWithoutPay += payCheckDetailsTmp.Hours;
                }
                //if (ProjCategory::find(payCheckDetailsTmp.CategoryId).SIGOverhead)
                //{
                //    overHead += payCheckDetailsTmp.Hours;
                //}
            
                utilizationAllHoursSIG += payCheckDetailsTmp.Hours;

                parmStartDate   = payCheckDetailsTmp.StartDate;
                parmEndDate     = payCheckDetailsTmp.EndDate;

             
            }
            //Declaratin
            ProjCategory  projCategory;     
        
            employeeTSAndUtilizationTmp.HourlySalaried          = JmgEmployee::find(HcmWorker::findByPersonnelNumber(employeeTSAndUtilizationTmp.HcmPersonnelNumberId).RecId).DefaultProfileId;
          
            payCheckUtilizationTransTmp.clear();

            select ResourceName from payCheckUtilizationTransTmp where payCheckUtilizationTransTmp.HcmPersonnelNumberId == payCheckTmp.HcmPersonnelNumberId;

            employeeTSAndUtilizationTmp.Supervisor              = payCheckUtilizationTransTmp.ResourceName;//HcmWorker::find(TSTimesheetTable::find(payCheckDetailsTmp.TimesheetNbr).SIGParentWorker).name();

            payCheckUtilizationTransTmp.clear();

            select sum(Hours) from payCheckUtilizationTransTmp where payCheckUtilizationTransTmp.HcmPersonnelNumberId == payCheckTmp.HcmPersonnelNumberId;

            employeeTSAndUtilizationTmp.BilledHours             = payCheckUtilizationTransTmp.Hours;
            
            payCheckUtilizationTransTmp.clear();

            select sum(TotalHours) from payCheckUtilizationTransTmp where payCheckUtilizationTransTmp.HcmPersonnelNumberId == payCheckTmp.HcmPersonnelNumberId
                                                                &&   payCheckUtilizationTransTmp.CategoryId == "Overhead"  
                                                                exists join projCategory 
                                                                 where projCategory.CategoryId ==    payCheckUtilizationTransTmp.CategoryId  
                                                                    &&   projCategory.SIGOverhead ==  NoYes::Yes  ;
            overHead = payCheckUtilizationTransTmp.TotalHours;

            employeeTSAndUtilizationTmp.Regular                 = utilizationAllHoursSIG;
            employeeTSAndUtilizationTmp.BillableHours           = utilizationAllHoursSIG -  personalLeave -  holiday - overHead - leaveWithoutPay;
            employeeTSAndUtilizationTmp.EmpDepartment           = HcmWorkerHelper::getPrimaryDepartment(HcmWorker::findByPersonnelNumber(employeeTSAndUtilizationTmp.HcmPersonnelNumberId).RecId).Name;

            if (JmgPayAgreementTable::find( employeeTSAndUtilizationTmp.HourlySalaried).RADEmployeeType == RADEmployeeType::Hourly)
            {
                employeeTSAndUtilizationTmp.UtilBaseAllHours            = utilizationAllHoursSIG;//JmgPayAgreementTable::find( employeeTSAndUtilizationTmp.HourlySalaried).RADUtilBaseDays;
                //employeeTSAndUtilizationTmp.Regular                     = utilizationAllHoursSIG;
                employeeTSAndUtilizationTmp.UtilBaseExlHolPL            = employeeTSAndUtilizationTmp.Regular + otHoursSIG  -  personalLeave -  holiday - leaveWithoutPay;
            }
            else
            {
                utilBaseHours = JmgPayAgreementTable::find( employeeTSAndUtilizationTmp.HourlySalaried).RADUtilBaseDays;

                if(utilizationAllHoursSIG < 40)
                {
                    utilBaseHours = utilizationAllHoursSIG  - personalLeave -  holiday - leaveWithoutPay;
                }
                else
                {
                    utilBaseHours = utilBaseHours - personalLeave -  holiday - leaveWithoutPay;
                }

                employeeTSAndUtilizationTmp.UtilBaseAllHours            = utilBaseHours;
                //employeeTSAndUtilizationTmp.Regular                     = employeeTSAndUtilizationTmp.UtilBaseAllHours;
                employeeTSAndUtilizationTmp.UtilBaseExlHolPL            = employeeTSAndUtilizationTmp.Regular  -  personalLeave -  holiday;
            }
            if (employeeTSAndUtilizationTmp.UtilBaseAllHours)
            {
                employeeTSAndUtilizationTmp.UtilizationAllHours     = (employeeTSAndUtilizationTmp.BillableHours / employeeTSAndUtilizationTmp.UtilBaseAllHours) * 100;//payCheckTmpDetailsIns.Hours;
            }
            if (employeeTSAndUtilizationTmp.UtilBaseExlHolPL)
            {
                employeeTSAndUtilizationTmp.UtilizationExlHolPL     = (utilizationExlHolPLSIG + employeeTSAndUtilizationTmp.UtilBaseExlHolPL) ;//payCheckDetailsTmp.Hours;
            }
            
            employeeTSAndUtilizationTmp.NonBillableHours        = overHead;
            employeeTSAndUtilizationTmp.OTHours                 = otHoursSIG;//payCheckDetailsTmp.Hours;
            employeeTSAndUtilizationTmp.PersonalLeave           = personalLeave;
            employeeTSAndUtilizationTmp.Holiday                 = holiday;
            employeeTSAndUtilizationTmp.WithoutPay              = leaveWithoutPay;
            employeeTSAndUtilizationTmp.StartDate               = parmStartDate;//payCheckDetailsTmp.StartDate;
            employeeTSAndUtilizationTmp.Total                   = employeeTSAndUtilizationTmp.BillableHours + personalLeave +  holiday + leaveWithoutPay;
            employeeTSAndUtilizationTmp.EndDate                 = parmEndDate;//payCheckDetailsTmp.EndDate;
            employeeTSAndUtilizationTmp.insert();

            //assinging null values
            otHoursSIG              = 0;
            utilizationExlHolPLSIG  = 0;
            utilizationAllHoursSIG  = 0;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>