<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RADCustAgingReportControllerV1</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustAgingReportController</c> class is the controller class for the <c>CustAgingReport</c>
///    SRS report.
/// </summary>
public class RADCustAgingReportControllerV1 extends SrsReportRunController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    protected str getReportName(CustAgingReportContract _contract)
    {
        str reportNameLocal;

        if (_contract.parmDetailed())
        {
            if (_contract.parmIncludeAmountCur())
            {
                reportNameLocal = ssrsReportStr(RADCustAgingReportV1, DesignWithDetailAndWithTransactionCur);
            }
            else
            {
                reportNameLocal = ssrsReportStr(RADCustAgingReportV1, DesignWithDetailAndNoTransactionCur);
            }
        }
        else
        {
            if (_contract.parmIncludeAmountCur())
            {
                reportNameLocal = ssrsReportStr(RADCustAgingReportV1, DesignWithNoDetailAndWithTransactionCur);
            }
            else
            {
                reportNameLocal = ssrsReportStr(RADCustAgingReportV1, DesignWithNoDetailAndNoTransactionCur);
            }
        }

        return reportNameLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the query before the prompt.
    /// </summary>
    protected void prePromptModifyContract()
    {
        CustAgingReportContract contract = this.parmReportContract().parmRdpContract() as CustAgingReportContract;

        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()), contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity to modify the contract before the report is run.
    /// </summary>
    /// <remarks>
    ///  The following are common scenarios for which to use this method:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Modifying the query.</description>
    ///   </item>
    ///   <item>
    ///   <description>Setting the contract values that are hidden from the user on the dialog.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Subscribing to the <c>renderingComplete</c> event.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void preRunModifyContract()
    {
        CustAgingReportContract contract = this.parmReportContract().parmRdpContract() as CustAgingReportContract;
        this.parmReportContract().parmReportName(this.getReportName(contract));
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity for validation prior to running the report.
    /// </summary>
    /// <returns>
    /// A container that contains two items.
    /// </returns>
    /// <remarks>
    ///  Override this method to perform validation before running a report. A common use of this method is
    ///  to validate whether the time taken to run the report is acceptable.The following are common
    ///  scenarios for which to use this method:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Return a warning if the number of records processed is large enough to affect the user
    ///   experience if the report is printed to the screen.</description>
    ///   </item>
    ///   <item>
    ///   <description>Return an error if the number of records processed is large enough that the report
    ///   could timeout.</description>
    ///   </item>
    ///  </list>
    ///   The default behavior is to run the report.
    /// </remarks>
    protected container preRunValidate()
    {
        // Now that this report is a preprocess tempdb report, we no longer need
        // the limits that were required in the SYS version of the report.
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryChanged</Name>
				<Source><![CDATA[
    protected void queryChanged(str _key, Query _query)
    {
        super(_key, _query);

        SysOperationDataContractInfo queryInfo = this.getDataContractInfoObjectsRecursively().lookup(_key);
        SysOperationQueryDataContractInfo queryDataContractInfo = queryInfo as SysOperationQueryDataContractInfo;

        // checking to see if queryInfo is an object of SysOperationQueryDataContractInfo, if yes only then
        // check sorting information
        if (queryDataContractInfo != null)
        {
            int datasourceCount = _query.dataSourceCount();

            for (int i = 1; i <= datasourceCount; i+=1)
            {
                int sortFieldCount = _query.dataSourceNo(i).sortFieldCount();

                if (sortFieldCount)
                {
                    boolean found = false;
                    int j = 1;
                    QueryBuildDataSource qbds = _query.dataSourceNo(i);
                    str tableName = tableId2Name(qbds.table());

                    while (!found && j <= sortFieldCount)
                    {
                        found = (tableName == tableStr(CustTable)
                                    && qbds.sortField(j) != fieldNum(CustTable, AccountNum)
                                    && qbds.sortField(j) != fieldNum(CustTable, CustGroup))
                                || (tableName == tableStr(DirPartyTable) && qbds.sortField(j) != fieldNum(DirPartyTable, Name));

                        j++;
                    }
                    if (found)
                    {
                        info(strFmt("@AccountsReceivable:FieldsToSortInAgingReport", fieldPName(CustTable, AccountNum), fieldPName(DirPartyTable, Name), fieldPName(CustTable, CustGroup)));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query ranges based on the caller.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object of the report.
    /// </param>
    /// <param name="_contract">
    /// The <c>CustAgingReportContract</c> object of the report.
    /// </param>
    public void setRanges(Query _query, CustAgingReportContract _contract)
    {
        CustAgingReportTmp custAgingReportTmp;

        // Checking the current table number
        if (this.parmArgs() && this.parmArgs().record() && this.parmArgs().record().TableId == tableNum(CustAgingReportTmp))
        {
            custAgingReportTmp = this.parmArgs().record();

            // Modifying the query
            _query.dataSourceTable(tableNum(CustTable)).rangeField(fieldNum(CustTable, AccountNum)).value(custAgingReportTmp.AccountNum);

            // Setting the ranges
            _contract.parmDateTransactionDuedate(any2int(custAgingReportTmp.Balance01));
            _contract.parmAgingBuckets(custAgingReportTmp.Txt);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RADCustAgingReportControllerV1 controller = new RADCustAgingReportControllerV1();
        controller.parmReportName(ssrsReportStr(RADCustAgingReportV1, DesignWithNoDetailAndNoTransactionCur));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>