<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SIGTimeSheetDetailsUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SIGTimeSheetDetailsUIBuilder extends SrsReportDataContractUIBuilder
{
    SIGTimeSheetDetailsContract         rdpContract;
    FormBuildComboBoxControl            cmbBuildPayPeriod;
    FormComboBoxControl                 cmbPayPeriod;
    DialogField                         dlgFldPayCycle;
    DialogField                         dlgFldPayPeriod;
    container                           payPeriodList;

    #DEFINE.PayPeriodListControl('PayPeriodListControl')
    /// <summary>
    ///     Add customizations for controls created for contract parameter in report dialog.
    /// </summary>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    public void build()
    {
      
            // Initialize contract.
            rdpContract = this.dataContractObject();

            // Add pay cycle field.
            dlgFldPayCycle = this.addDialogField(methodStr(SIGTimeSheetDetailsContract , parmPayCycle), rdpContract);
            dlgFldPayCycle.helpText("@SYS4090106");
            dlgFldPayCycle.registerOverrideMethod(methodStr(FormReferenceGroupControl, modified), methodStr(SIGTimeSheetDetailsUIBuilder, modified), this);

            // Add pay period field.
            cmbBuildPayPeriod = dialog.curFormBuildGroup().addControl(FormControlType::ComboBox, #PayPeriodListControl);
            cmbBuildPayPeriod.label("@Payroll:PayPeriod");
            cmbBuildPayPeriod.helpText("@SYS4090107");
            cmbBuildPayPeriod.comboType(1);
            cmbBuildPayPeriod.width(150);

          
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public void getFromDialog()
    {
       // super();

       // if (ctrl.parmArgs().menuItemName() == menuitemOutputStr(PayrollPayStatementReport))
        {
            rdpContract.parmPayPeriod(conPeek(payPeriodList, cmbPayPeriod.selection() + 1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the pay period combo box with <c>PayrollPayPeriod</c> records for a selected <c>PayrollPayCycle</c>.
    /// </summary>
    private void initPayPeriods()
    {
        PayrollPayCycleRecId    payrollPayCycleRecId;
        PayrollPayPeriod        payrollPayPeriod;
        FormReferenceGroupControl control;

        // Get the selected pay cycle.
        control = this.bindInfo().getDialogField(rdpContract, methodStr(SIGTimeSheetDetailsContract , parmPayCycle)).control() as FormReferenceGroupControl;
        payrollPayCycleRecId = control.value();

        payPeriodList = conNull();
        cmbPayPeriod.clear();

        cmbPayPeriod.add("");
        payPeriodList += 0;

        while select RecId,  PeriodStartDate, PeriodEndDate from payrollPayPeriod
            order by PeriodEndDate
            where payrollPayPeriod.PayCycle == payrollPayCycleRecId
        {
            cmbPayPeriod.add(strFmt("@SYS76785", date2StrUsr(payrollPayPeriod.PeriodStartDate, DateFlags::FormatAll), date2StrUsr(payrollPayPeriod.PeriodEndDate, DateFlags::FormatAll)));

            payPeriodList += payrollPayPeriod.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Override the modify functionality for the PayCycle control.
    /// </summary>
    /// <param name="_control">
    ///     The handle for the PayCycle control.
    /// </param>
    /// <returns>
    ///     A boolean value representing the success or failure of the modification.
    /// </returns>
    public boolean modified(FormReferenceGroupControl _control)
    {
        boolean ret = _control.modified();

        if (ret)
        {
            this.initPayPeriods();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    public void postRun()
    {
        super();

     //   if (ctrl.parmArgs().menuItemName() == menuitemOutputStr(PayrollPayStatementReport))
        {
            // This method should be called in order to handle events on dialogs.
            this.dialog().dialogForm().formRun().controlMethodOverload(false);

            // Initialize the pay period combo and set the last selected value.
            cmbPayPeriod = this.dialog().dialogForm().formRun().control(cmbBuildPayPeriod.id());
            this.initPayPeriods();
            this.setLastPayPeriod();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastPayPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>PayrollPayPeriod</c> record in the combo box based on the contract class parameter.
    /// </summary>
    private void setLastPayPeriod()
    {
        PayrollPayPeriodRecId   payrollPayPeriodRecId = rdpContract.parmPayPeriod();
        Integer                 len = conLen(payPeriodList);
        int                     i;

        for (i = 0; i < len; i++)
        {
            if (payrollPayPeriodRecId == conPeek(payPeriodList, i))
            {
                cmbPayPeriod.selection(i - 1);
                break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>